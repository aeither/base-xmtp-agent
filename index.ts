import { createGroq } from "@ai-sdk/groq";
import { Agent } from "@xmtp/agent-sdk";
import { getTestUrl } from "@xmtp/agent-sdk/debug";
import {
  AttachmentCodec,
  ContentTypeRemoteAttachment,
  RemoteAttachmentCodec
} from "@xmtp/content-type-remote-attachment";
import {
  ContentTypeWalletSendCalls,
  WalletSendCallsCodec,
} from "@xmtp/content-type-wallet-send-calls";
import { generateText, stepCountIs } from "ai";
import "dotenv/config";
import { getCryptoPriceTool } from "./tools/crypto-price.js";
import { getWebAppLinkTool } from "./tools/web-app-link.js";
import { getGenerateInvoiceTool } from "./tools/generate-invoice.js";
import { getManageFundsTool } from "./tools/manage-funds.js";
import {
  ActionBuilder,
  inlineActionsMiddleware,
  registerAction
} from "./utils/inline-actions/inline-actions.js";
import { ActionsCodec } from "./utils/inline-actions/types/ActionsContent.js";
import { IntentCodec } from "./utils/inline-actions/types/IntentContent.js";
import { USDCHandler } from "./utils/usdc.js";

/* Initialize the Groq client */
const groq = createGroq({ apiKey: process.env.GROQ_API_KEY });

/* Initialize USDC handler for Base Mainnet */
const usdcHandler = new USDCHandler("base-mainnet");
const networkConfig = usdcHandler.getNetworkConfig();

const agent = await Agent.createFromEnv({
  codecs: [
    new AttachmentCodec(),
    new RemoteAttachmentCodec(),
    new WalletSendCallsCodec(),
    new ActionsCodec(),
    new IntentCodec(),
  ],
  env: process.env.XMTP_ENV as "local" | "dev" | "production",
});

/* Use the inline actions middleware */
agent.use(inlineActionsMiddleware);

agent.on("text", async (ctx) => {
  const messageContent = ctx.message.content;
  const senderAddress = await ctx.getSenderAddress();
  console.log(`Received message: ${messageContent} by ${senderAddress}`);

  try {
    /* Get the AI response from Groq with tool calling */
    const { text, steps } = await generateText({
      model: groq("llama-3.3-70b-versatile"),
      tools: {
        getCryptoPrice: getCryptoPriceTool,
        getWebAppLink: getWebAppLinkTool,
        generateInvoice: getGenerateInvoiceTool,
        manageFunds: getManageFundsTool,
      },
      stopWhen: stepCountIs(5), // Allow up to 5 steps for multi-step reasoning
      system:
        "You are a helpful small business assistant that helps clients make payments to freelancers easily. " +
        "You can help with checking cryptocurrency prices for payments using the getCryptoPrice tool. " +
        "When users ask about the web app, mini app, or opening the app, use the getWebAppLink tool to provide them with the link. " +
        "When users ask to generate, create, or send an invoice, use the generateInvoice tool. " +
        "When users ask to manage funds, check the group's balance, or top up the group account, use the manageFunds tool. " +
        "When showing fund management information, always refer to it as 'our' or 'the group's' funds (plural form). " +
        "Be professional, friendly, and focus on making the payment process simple and straightforward. " +
        "Be concise and to the point. " +
        "Provide clear instructions and helpful information about crypto payments when needed.",
      messages: [{ role: "user", content: messageContent }],
    });

    console.log(`AI generated ${steps.length} step(s)`);
    console.log("Steps:", JSON.stringify(steps, null, 2));

    console.log(`Sending AI response: ${text}`);
    /* Send the AI response to the conversation */
    await ctx.sendText(text);

    // Check if invoice was generated by looking through steps for tool-result
    let invoiceGenerated = false;
    let invoiceData = null;

    // Check if manageFunds was called
    let manageFundsCalled = false;
    let fundsData = null;

    for (const step of steps) {
      if (step.content && Array.isArray(step.content)) {
        for (const item of step.content) {
          if (item.type === "tool-result" && item.toolName === "generateInvoice") {
            invoiceGenerated = true;
            invoiceData = item;
            console.log("Invoice tool result found:", JSON.stringify(item));
          }
          if (item.type === "tool-result" && item.toolName === "manageFunds") {
            manageFundsCalled = true;
            fundsData = item;
            console.log("ManageFunds tool result found:", JSON.stringify(item));
          }
        }
      }
    }

    if (invoiceGenerated) {
      console.log("Invoice generated, sending remote attachment...");
      if (invoiceData) {
        console.log("Invoice details:", JSON.stringify(invoiceData.input));
      }

      // Construct RemoteAttachment
      const remoteAttachment = {
        url: "https://b891d14d436694bb9a7feeba91730b95.ipfscdn.io/ipfs/QmYxTz1anYunf5bdcH2mbKUqEJVVwTBQetikLC7QKCng6g",
        contentDigest: "fe971730028e05d8debdb5cdb09d1fb1a744cd7623031f97ddeb43e9b9f59a80",
        salt: new Uint8Array([249, 253, 253, 160, 166, 33, 141, 85, 1, 207, 14, 232, 102, 217, 169, 110, 45, 66, 108, 235, 237, 6, 52, 120, 74, 197, 75, 239, 130, 8, 19, 247]),
        nonce: new Uint8Array([96, 65, 200, 188, 87, 43, 87, 243, 112, 53, 250, 239]),
        secret: new Uint8Array([245, 208, 53, 70, 99, 7, 243, 2, 172, 118, 214, 74, 216, 34, 111, 5, 254, 186, 78, 197, 174, 110, 126, 175, 192, 118, 204, 169, 39, 184, 1, 182]),
        scheme: "https" as const,
        contentLength: 125441,
        filename: "B2F74090-9740-4CF9-8F38-AB50A9F6261C.png"
      };

      await ctx.conversation.send(remoteAttachment, ContentTypeRemoteAttachment);
      console.log(`Remote attachment sent for invoice`);
    } else {
      console.log("No invoice tool was called in this interaction.");
    }

    // Handle manageFunds tool result - show fund management action buttons
    console.log("ManageFunds called:", manageFundsCalled);
    console.log("Funds data:", fundsData);
    if (manageFundsCalled && fundsData) {
      console.log("ManageFunds called, showing fund management actions...");

      await ActionBuilder.create(
        "fund-management",
        `💰 Fund Management\n`
      )
        .add("top-up-funds", "💸 Top Up Now")
        .add("last-expenses", "📊 Last Expenses")
        .add("members-list", "👥 Members List")
        .add("upcoming-expenses", "📅 Upcoming Expenses")
        .send(ctx);
      console.log("Fund management action buttons sent");
    }
  } catch (error) {
    console.error("Error getting AI response:", error);
    await ctx.sendText(
      "Sorry, I encountered an error processing your message.",
    );
  }
});

/* Register payment action handler */
registerAction("pay-receipt", async (ctx) => {
  const senderAddress = await ctx.getSenderAddress();
  if (!senderAddress) return;

  // Extract payment details (in a real implementation, these would come from vision AI analysis)
  const recipientAddress = "0x2191433264B3E4F50439b3822323EC14448B192c";
  const amount = 0.01;
  const amountInDecimals = Math.floor(amount * Math.pow(10, networkConfig.decimals));

  // Create USDC transfer calls
  const transferCalls = usdcHandler.createUSDCTransferCalls(
    senderAddress,
    recipientAddress,
    amountInDecimals,
  );

  // Add rich metadata
  transferCalls.calls[0].metadata = {
    description: `Pay receipt: ${amount} USDC`,
    transactionType: "transfer",
    currency: "USDC",
    amount: amountInDecimals.toString(),
    decimals: networkConfig.decimals.toString(),
    networkId: networkConfig.networkId,
  };

  // Send the payment transaction
  await ctx.conversation.send(transferCalls, ContentTypeWalletSendCalls);
  await ctx.sendText(`💸 Please approve the ${amount} USDC payment to ${recipientAddress.slice(0, 6)}...${recipientAddress.slice(-4)} in your wallet!`);
});

/* Register top-up funds action handler */
registerAction("top-up-funds", async (ctx) => {
  const senderAddress = await ctx.getSenderAddress();
  if (!senderAddress) return;

  // Fund management wallet address
  const fundWalletAddress = "0xA830Cd34D83C10Ba3A8bB2F25ff8BBae9BcD0125";

  // Default top-up amount (can be customized)
  const amount = 10; // 10 USDC
  const amountInDecimals = Math.floor(amount * Math.pow(10, networkConfig.decimals));

  // Create USDC transfer calls to fund wallet
  const transferCalls = usdcHandler.createUSDCTransferCalls(
    senderAddress,
    fundWalletAddress,
    amountInDecimals,
  );

  // Add rich metadata
  transferCalls.calls[0].metadata = {
    description: `Top up group funds: ${amount} USDC`,
    transactionType: "transfer",
    currency: "USDC",
    amount: amountInDecimals.toString(),
    decimals: networkConfig.decimals.toString(),
    networkId: networkConfig.networkId,
  };

  // Send the payment transaction
  await ctx.conversation.send(transferCalls, ContentTypeWalletSendCalls);
  await ctx.sendText(`💸 Please approve the ${amount} USDC top-up to our group fund wallet ${fundWalletAddress.slice(0, 6)}...${fundWalletAddress.slice(-4)} in your wallet!`);
});

/* Register last expenses action handler */
registerAction("last-expenses", async (ctx) => {
  // Mock data for last expenses
  const lastExpenses = [
    { date: "2025-10-15", description: "Discord community management - September", amount: "150 USDC", recipient: "0x2191...192c" },
    { date: "2025-10-10", description: "Social media content creation", amount: "200 USDC", recipient: "0x5678...abcd" },
    { date: "2025-10-05", description: "Development bounty", amount: "500 USDC", recipient: "0x9abc...def1" },
    { date: "2025-10-01", description: "Design work", amount: "300 USDC", recipient: "0x1234...5678" },
  ];

  let expensesList = "📊 Last Expenses\n\n";
  lastExpenses.forEach(expense => {
    expensesList += `📅 ${expense.date}\n`;
    expensesList += `💼 ${expense.description}\n`;
    expensesList += `💰 ${expense.amount}\n`;
    expensesList += `👤 To: ${expense.recipient}\n\n`;
  });

  await ctx.sendText(expensesList);
});

/* Register members list action handler */
registerAction("members-list", async (ctx) => {
  // Mock data for fund members
  const members = [
    { name: "Alice", address: "0xA830...0125", contribution: "500 USDC", role: "Admin" },
    { name: "Bob", address: "0x2191...192c", contribution: "350 USDC", role: "Member" },
    { name: "Carol", address: "0x5678...abcd", contribution: "200 USDC", role: "Member" },
    { name: "David", address: "0x9abc...def1", contribution: "150 USDC", role: "Member" },
  ];

  let membersList = "👥 Fund Members\n\n";
  members.forEach(member => {
    membersList += `${member.role === "Admin" ? "👑" : "👤"} ${member.name}\n`;
    membersList += `🔑 ${member.address}\n`;
    membersList += `💰 Contributed: ${member.contribution}\n\n`;
  });

  await ctx.sendText(membersList);
});

/* Register upcoming expenses action handler */
registerAction("upcoming-expenses", async (ctx) => {
  // Mock data for upcoming expenses
  const upcomingExpenses = [
    { dueDate: "2025-10-25", description: "Anna - Development work", amount: "300 USDC", status: "Pending" },
    { dueDate: "2025-10-28", description: "Marketing campaign Q4", amount: "450 USDC", status: "Approved" },
    { dueDate: "2025-11-01", description: "Server hosting - November", amount: "100 USDC", status: "Scheduled" },
    { dueDate: "2025-11-05", description: "Community event sponsorship", amount: "250 USDC", status: "Under review" },
  ];

  let expensesList = "📅 Upcoming Expenses\n\n";
  upcomingExpenses.forEach(expense => {
    expensesList += `📆 Due: ${expense.dueDate}\n`;
    expensesList += `💼 ${expense.description}\n`;
    expensesList += `💰 ${expense.amount}\n`;
    expensesList += `📌 Status: ${expense.status}\n\n`;
  });

  await ctx.sendText(expensesList);
});

agent.on("attachment", async (ctx) => {

  const senderAddress = await ctx.getSenderAddress();
  const remoteAttachment = ctx.message.content;

  console.log(`Received remote attachment from ${senderAddress}`);
  console.log(`Filename: ${remoteAttachment.filename}`);
  console.log(`URL: ${remoteAttachment.url}`);

  // Send analyzing message
  await ctx.sendText("🔍 Analyzing receipt...");

  // Wait 3 seconds before processing
  await new Promise(resolve => setTimeout(resolve, 3000));

  await ActionBuilder.create(
    "pay-receipt",
    "📄 Receipt Details:\n\n" +
    "👤 Receiver: 0x2191433264B3E4F50439b3822323EC14448B192c\n" +
    "💰 Amount: 0.01 USDC\n" +
    "📝 Notes: discord community management September"
  )
    .add("pay-receipt", "💸 Pay Now")
    .send(ctx);

});

agent.on("start", () => {
  console.log(`Waiting for messages...`);
  console.log(`Address: ${agent.address}`);
  console.log(`🔗${getTestUrl(agent.client)}`);
});

void agent.start();
